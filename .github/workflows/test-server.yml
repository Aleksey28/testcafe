name: Test Server

on:
  workflow_call:
    inputs:
      test-script:
        required: true
        type: string
      node-version:
        required: false
        type: number
        default: 16
      is-docker:
        required: false
        type: boolean
        default: false
env:
  NO_CACHE: ${{ secrets.NO_CACHE }}

jobs:  
  test:
    runs-on: ubuntu-latest
    environment: test-server
    steps:
      - uses: actions/github-script@v3
        with:
          script: |
            await github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.inputs.sha,
              context: context.workflow,
              state: 'pending',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
      - uses: actions/checkout@v2
        with:
          ref: ${{github.event.inputs.merged_sha || github.event.inputs.sha}}
          
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.node-version }}

      - uses: actions/github-script@v3
        with:
          script: |
            const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
            
            let artifacts = {};
            
            for(let i = 0;i<36&&!artifacts.total_count;i++,await delay(5000)) {
              try {
                ({ data: artifacts } = await github.actions.listWorkflowRunArtifacts({
                repo: context.repo.repo,
                owner: context.repo.owner,
                run_id: context.payload.inputs.deploy_run_id
              }));
              }
              catch (e) {
                console.log(e);
              }
            }

            const artifactName = context.payload.inputs.is-docker ? 'docker' : 'npm';
            const packageName = context.payload.inputs.is-docker ? 'docker.zip' : 'package.zip';
            
            const { data: artifact } = await github.request(artifacts.artifacts.find(artifact=> artifact.name === artifactName).archive_download_url);
            require('fs').writeFileSync(require('path').join(process.env.GITHUB_WORKSPACE, packageName), Buffer.from(artifact))
        
      - run: |
          unzip package.zip
          tar --strip-components=1 -xzf testcafe-*.tgz
        if: ${{ !inputs.is-docker }}

      - run: |
          unzip docker.zip
          docker load -i testcafe-*.tar
        if: ${{ inputs.is-docker }}
          
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        if: ${{ !env.NO_CACHE }}
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - run: npm ci
      - run: ${{ inputs.test-script }}
        timeout-minutes: 60
      - uses: actions/github-script@v3
        with:
          script: |
            await github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.inputs.sha,
              context: context.workflow,
              state: 'success',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
      - uses: actions/github-script@v3
        if: failure() || cancelled()
        with:
          script: |
            await github.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.inputs.sha,
              context: context.workflow,
              state: 'failure',
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`
            });
